#!groovy
@Library("bpldc_lib@jenkinsfile") _

def bpl_tool = new org.bpl.bpl_tools()

pipeline {
    agent any

    environment {
        RAILS_ENV = 'test'
        // RAILS_ENV = 'staging'
    } 

    options {
        ansiColor('xterm')
    }
    
    stages {
   
                // stage('CheckoutCode') {
                //     steps {
                //         checkout([$class: 'GitSCM', 
                //             branches: [[name: '*/${BRANCH_NAME}']], 
                //             userRemoteConfigs: [[
                //                 url: "https://github.com/boston-library/Commonwealth_3.git",
                //                 credentialsId: 'bplwebmaster'
                //                 ]]
                //         ])
                //     }
                // }

        stage('CheckoutCode') {
            steps {
                script {  
                    echo "bpl_tool is ${bpl_tool}"
                    echo "In Jenkinsfile phase: Checkout Source Code" 
                    bpl_tool.CheckoutCode() 
                }
            }
        }
        
        stage('Preparation') {
            steps {
                script {  
                    echo "In Jenkinsfile phase: Preparation at the very begining"                   
                    bpl_tool.RunPreparation()
                }                
            }
        }

                // stage ('Install new ruby'){
                //     steps {
                //         sh '''
                //             #!/bin/bash -l
                //             set +x
           
                //             if [ -s /var/lib/jenkins/.rvm/bin/rvm ]; then 
                //                 source /var/lib/jenkins/.rvm/bin/rvm
                //             else 
                //                 exit
                //             fi
                            
                //             EXPECTED_RUBY=`cat .ruby-version`
                //                         ## /var/lib/jenkins/.rvm/bin/rvm list
                //             echo "EXPECTED_RUBY is $EXPECTED_RUBY"
                //             set -x
                //             rvm list
                //             rvm use ${EXPECTED_RUBY} --default
                //             ruby --version
                            
                //         '''
                //     }
                // }

        stage ('Install new ruby'){
            steps {
                script {  
                    echo "In Jenkins phase: Install new ruby" 
                    // def EXPECTED_RUBY = sh(returnStdout: true, script: 'cat .ruby-version')
                    EXPECTED_RUBY = '3.2.5'
                    echo "EXPECTED_RUBY is $EXPECTED_RUBY"                    
                    bpl_tool.InstallNewRuby(EXPECTED_RUBY) 
                }
            }
        }
        
                // stage('bundle install') {
                //     steps {
                //         sh '''
                //             #!/bin/bash --login
                //             set +x
                            
                //             EXPECTED_RUBY=`cat .ruby-version`
            
                //             if [ -s /var/lib/jenkins/.rvm/bin/rvm ]; then 
                //                 source /var/lib/jenkins/.rvm/bin/rvm
                //             else 
                //                 exit
                //             fi    
                            
                //             rvm use ${EXPECTED_RUBY} --default
                            
                //             bundle install --jobs=3 --retry=3
                            
                //         '''
                //     }
                // }

        stage ('Bundle Install .. '){
            steps {
                script {  
                    echo "In Jenkins phase: bundle install "                    
                    bpl_tool.RunBundleInstall() 
                }
            }
        }

        stage ('DB preparation'){
            steps {
                script {  
                    echo "In Jenkins phase: DB preparation " 
                    railsEnv = env.RAILS_ENV
                            // sh "printenv"
                    echo "railsEnv variables is : ${railsEnv}"                   
                    bpl_tool.RunDBpreparation(railsEnv) 
                }
            }
        }

                // stage('DB preparation') {
                //     steps {
                //         sh '''
                //             #!/bin/bash --login
                //             set +x
                            
                //             ls -alt
                //             EXPECTED_RUBY=`cat .ruby-version`
                        
                //             if [ -s /var/lib/jenkins/.rvm/bin/rvm ]; then 
                //                 source /var/lib/jenkins/.rvm/bin/rvm
                //             else 
                //                 exit
                //             fi    
                            
                //             rvm reinstall ${EXPECTED_RUBY} -C --with-jemalloc --quiet
                //             rvm get stable
                //             # rvm use ${EXPECTED_RUBY} --default 
                //             rvm alias create --default  ${EXPECTED_RUBY} 
                //             rvm alias create --current  ${EXPECTED_RUBY} 

                //             # rvm use ${EXPECTED_RUBY} --default
                //             # set -x
                            
                //             RAILS_ENV=${RAILS_ENV} bundle exec rails db:prepare
                //             RAILS_ENV=${RAILS_ENV} bundle exec rails db:migrate
                            
                //         '''
                //     }
                // }

        stage('CI') {
            steps {
                script {  
                    echo "In Jenkins phase: running CI testing "                   
                    bpl_tool.RunCI() 
                }
            }
        }

        // stage('Deploy') {
        //     steps {
        //         script {  
        //             echo "In Jenkins phase: Capistrano deploying "
        //             railsEnv = env.RAILS_ENV
        //             server_ip = env.SERVER_IP
        //             ssh_key = env.SSH_KEY
        //                     // echo "railsEnv is ${railsEnv}, server_ip is ${server_ip}, ssh_key is ${ssh_key}"              
        //             bpl_tool.RunDeployment(railsEnv, server_ip, ssh_key) 
        //         }
        //     }
        // }
        

        stage("Deploy test to use withCredentials") {
            steps {
                script {
                    echo "In Jenkins phase: Capistrano deploying "
                                    // ssh_key = null
                                    // server_ip = null

                    withCredentials( [usernamePassword(credentialsId: 'TESTING_SSH_KEY', usernameVariable: 'sshkey_USERNAME', passwordVariable: 'sshkey'),
                        usernamePassword(credentialsId: 'TESTING_SERVER_IP', usernameVariable: 'serverip_USERNAME', passwordVariable: 'serverip')]){
                            // maskPasswords(["sshkey", "serverip"])
                            // railsEnv    = env.RAILS_ENV
                            railsEnv    = env.deploy_env
                                    // server_ip   = serverip_PASSWORD
                                    // ssh_key     = sshkey_PASSWORD

                                    echo "railsEnv is  $railsEnv"
                                    echo "sshkey is  $sshkey"
                                    echo "serverip is  $serverip" 
                                    bpl_tool.RunDeployment(railsEnv, serverip, sshkey)

                            // bpl_tool.RunDeployment(railsEnv, serverip, sshkey)
                                    // sh '''
                                    //     echo "Using credentials"
                                    //     echo "TESTING_DEPLOY_USER username is  $deploy_USERNAME, and Password is: $deploy_PASSWORD"
                                    //     echo "TESTING_SSH_KEY username is  $sshkey_USERNAME, and Password is: $sshkey_PASSWORD"
                                    //     echo "TESTING_SERVER_IP username is  $TESTING_SERVER_IP, and Password is: $serverip_PASSWORD"
                                    //     deploy_p=\$deploy_PASSWORD
                                    //     sshkey_p=\$sshkey_PASSWORD
                                    //     serverip_p=\$serverip_PASSWORD
                                    //     echo "Displaying credentials passwords:"
                                    //     echo "deploy_p is  $deploy_p"
                                    //     echo "sshkey_p is  $sshkey_p"
                                    //     echo "serverip_p is  $serverip_p"                      
                                    //     # curl -u $USERNAME:$PASSWORD http://www.example.com
                                    // 

                    }
                    // echo "railsEnv is  $railsEnv"
                    // echo "ssh_key is  $sshkey_p"
                    // echo "server_ip is  $serverip_p"                    
                }
            }
        }

        // stage('Deploy') {
        //     steps {
        //         script {

        //             sh """
        //                 #!/bin/bash --login
        //                 set -x

        //                 # STAGE_NAME=\$stage_name_password
        //                 # SERVER_IP=\$server_ip_password
        //                 # DEPLOY_USER=\$deploy_user_password
        //                 # SSH_KEY=\$ssh_key_password

        //                 # GIT_HTTP_USERNAME=\$GIT_HTTP_USERNAME_password
        //                 # GIT_HTTP_PASSWORD=\$GIT_HTTP_PASSWORD_password
    
        //                 #m# EXPECTED_RUBY=`cat .ruby-version`
        //                 EXPECTED_RUBY='3.2.5'
        //                 echo "EXPECTED_RUBY is \$EXPECTED_RUBY"
                            
        //                 set +x
                        
        //                 if [ -s /var/lib/jenkins/.rvm/bin/rvm ]; then 
        //                     source /var/lib/jenkins/.rvm/bin/rvm
        //                 else 
        //                     exit
        //                 fi    
                        

        //                 rvm list
        //                 rvm install "\$EXPECTED_RUBY"
        //                 rvm use "\$EXPECTED_RUBY" --default
        //                 whereis ruby
        //                 ruby --version

        //                 echo "Rongbing Miao#1"
        //                 echo "SERVER_IP is \$SERVER_IP"
        //                 echo "SSH_KEY is \$SSH_KEY"

        //                 eval \$(ssh-agent)
        //                 ssh-add \$SSH_KEY

        //                 RAILS_ENV=staging cap -T 

        //                 # bundle exec cap staging install --trace
        //                 RAILS_ENV=staging cap staging install --trace
                        
        //                 ## bundle exec cap production deploy

        //                 # bundle exec cap staging install --trace  --ssh-options="-i /var/lib/jenkins/.ssh/promdev"
        //                 echo "Rongbing Miao#2"
        //                 # RAILS_ENV=staging cap -T
        //                 # bundle exec cap -T  --ssh-options="-i /var/lib/jenkins/.ssh/promdev"                        
        //                 echo "Rongbing Miao#3"
                        
        //                 ## If using GIT_HTTP_USERNAME/PASSWORD from Jenkins level, 
        //                 ## Capistrano breaks here!
        //                 RAILS_ENV=staging cap staging deploy:check  
        //                 # bundle exec RAILS_ENV=staging cap staging deploy --dry-run --trace 
        //                 RAILS_ENV=staging cap staging deploy --trace  
                        
        //                 if [[ -f ./config/deploy/production.rb ]]; then 
        //                     echo "There is ./config/deploy/production.rb created!"
        //                     ls -alt ./config/deploy/production.rb
        //                 else 
        //                     echo "There is NO ./config/deploy/production.rb yet"
        //                 fi   
        //             """
        //         }            
        //     }
        //}

    }

    post {
        failure {
            emailext (
                subject: "Build failed in Jenkins: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                body: """<p>Build failed in Jenkins:</p>
                        <p>Job: ${env.JOB_NAME}</p>
                        <p>Build Number: ${env.BUILD_NUMBER}</p>
                        <p>Build URL: <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>""",
                recipientProviders: [[$class: 'DevelopersRecipientProvider']]
            )
        }
    }

}    
